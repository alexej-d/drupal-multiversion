<?php

use Drupal\block\BlockInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\multiversion\Entity\Workspace;
use Drupal\Core\Database\Database;
use \Drupal\Core\Database\Driver\mysql\Connection;
use Drupal\multiversion\MultiversionMigration;

/**
 * Implements hook_install().
 */
function multiversion_install() {
  // Create default workspace.
  Workspace::create(['machine_name' => 'live', 'label' => 'Live', 'type' => 'basic'])->save();
  /** @var \Drupal\multiversion\MultiversionManagerInterface $manager */
  $manager = \Drupal::getContainer()->get('multiversion.manager');
  $manager->enableEntityTypes();

  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\block\Entity\Block[] $blocks */
  $blocks = $entity_type_manager->getStorage('block')->loadMultiple();
  foreach ($blocks as $block) {
    $plugin_id = $block->getPluginId();
    if (substr_count($plugin_id, ':') !== 1) {
      continue;
    }
    list($provider,) = explode(':', $plugin_id, 2);
    if ($provider === 'block_content') {
      $settings = [
        'plugin' => "$plugin_id:ws1",
        'label' => $block->label(),
        'theme' => $block->getTheme(),
        'region' => $block->getRegion(),
        'visibility' => $block->getVisibility(),
        'weight' => $block->getWeight(),
      ];
      $values = $settings;
      $values['settings'] = $settings;
      $values['id'] = get_unique_machine_name($block->id(), array_keys($blocks));
      $entity_type_manager
        ->getStorage('block')
        ->create($values)
        ->save();
      $block->delete();
    }
  }
}

function get_unique_machine_name($suggestion, $block_ids) {
  $block_ids = array_map(function ($block_id) {
    $parts = explode('.', $block_id);
    return end($parts);
  }, $block_ids);

  // Iterate through potential IDs until we get a new one. E.g.
  // 'plugin', 'plugin_2', 'plugin_3', etc.
  $count = 1;
  $machine_default = $suggestion;
  while (in_array($machine_default, $block_ids)) {
    $machine_default = $suggestion . '_' . ++$count;
  }
  return $machine_default;
}

/**
 * Implements hook_uninstall().
 */
function multiversion_uninstall() {
  \Drupal::state()->delete('multiversion_enabled');
}

/**
 * Add workspace field to data_field and revision_field tables and migrate data.
 */
function multiversion_update_8001() {
  $connection = Database::getConnection();
  if ($connection instanceof Connection) {
    $schema = $connection->schema();
    $entity_manager = \Drupal::service('entity.manager');
    $manager = \Drupal::service('multiversion.manager');

    // Find all supported entities.
    $entities = $manager->getSupportedEntityTypes();

    // Field can't be NOT NULL on an table with existing data.
    $field = array(
      'type' => 'int',
      'unsigned' => TRUE,
    );

    // Loop through each one.
    foreach ($entities as $entity_type => $entity) {
      $entity_keys = $entity->getKeys();

      // Get the field names used as keys.
      $field_id = $entity_keys['id'];
      $field_revision = $entity_keys['revision'];

      // Get the tables name used for base table and revision table.
      $table_base = ($entity->isTranslatable()) ? $entity->getDataTable() : $entity->getBaseTable();
      $table_revision = ($entity->isTranslatable()) ? $entity->getRevisionDataTable() : $entity->getRevisionTable();

      // Block content definition doesn't include the revision field table.
      // So get it.
      $tables = $entity_manager->getStorage($entity_type)
        ->getTableMapping()
        ->getTableNames();

      if (!$table_revision && in_array($entity_type . '_field_revision', $tables)) {
        $table_revision = $entity_type . '_field_revision';
      }

      $results = array();
      // Pull data from the old table.
      $old_data_table = $entity_type . '__workspace';

      if ($schema->tableExists($old_data_table)){
        $results = $connection->select($old_data_table)
          ->fields($old_data_table, array('entity_id', 'workspace_target_id'))
          ->execute()->fetchAll();
      }

      if ($schema->tableExists($table_base)) {
        if (!$schema->fieldExists($table_base, 'workspace')) {
          // Add new field to the base table.
          $schema->addField($table_base, 'workspace', $field);
        }

        foreach ($results as $result) {
          // Add the value to the new column.
          $connection->update($table_base)
            ->fields(array('workspace' => $result->workspace_target_id))
            ->condition($field_id, $result->entity_id, '=')
            ->execute();
        }
      }

      if ($schema->tableExists($old_data_table)) {
        // Drop old table.
        $schema->dropTable($old_data_table);
      }

      $results = array();
      // Pull data from old table.
      $old_revision_table = $entity_type . '_revision__workspace';

      if ($schema->tableExists($old_revision_table)) {
        $results = $connection->select($old_revision_table)
          ->fields($old_revision_table, array(
            'entity_id,',
            'revision_id',
            'workspace_target_id'
          ))
          ->execute();
      }

      if ($schema->tableExists($table_revision)) {
        if (!$schema->fieldExists($table_revision, 'workspace')) {
          // Add new field to the field revision table.
          $schema->addField($table_revision, 'workspace', $field);
        }

        foreach ($results as $result) {
          // Add data to the revision table.
          $connection->update($table_revision)
            ->fields(array('workspace' => $result->workspace_target_id))
            ->condition($field_id, $result->entity_id, '=')
            ->condition($field_revision, $result->revision_id)
            ->execute();
        }
      }

      if ($schema->tableExists($old_revision_table)) {
        // Drop old table.
        $schema->dropTable($old_revision_table);
      }
    }
  }
}

/**
 * Update user entity type to non-multiversionable.
 */
function multiversion_update_8004() {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $changes = $update_manager->getChangeSummary();
  // Check if user entity type has new changes.
  if (isset($changes['user'])) {
    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
    $entity_type_manager = \Drupal::service('entity_type.manager');
    $storage = $entity_type_manager->getStorage('user');
    $entity_type = $storage->getEntityType();
    $database = \Drupal::database();
    try {
      $entity_manager = \Drupal::entityManager();
      // Create a new migration and migrate user entities to the temporary storage.
      $migration = MultiversionMigration::create(\Drupal::getContainer(), $entity_manager);
      $migration->installDependencies();
      $migration->migrateContentToTemp($entity_type);
      // Remove all data from the old storage.
      $migration->emptyOldStorage($entity_type, $storage);

      // Delete revision tables that after applying updates doesn't get deleted.
      $tables_to_delete = ['user_revision__roles', 'user_revision__user_picture'];
      foreach ($tables_to_delete as $table_name) {
        if ($database->schema()->tableExists($table_name)) {
          $database->schema()->dropTable($table_name);
        }
      }

      // Apply new updates.
      $migration->applyNewStorage();
      // Migrate content from the temporary storage to the new storage.
      $migration->migrateContentFromTemp($entity_type);
      $migration->cleanupMigration('user__to_tmp');
      $migration->cleanupMigration('user__from_tmp');
      $migration->uninstallDependencies();
    }
    catch (\Exception $e) {
      \Drupal::logger('multiversion')->error($e->getMessage());
    }
  }
}

/**
 * Necessary updates when making Multiversion opt-in.
 *
 * To make Multiversion opt-in we introduced a configuration object where we
 * keep the information of the enabled entity types. In this update we check
 * which entity types have been changed and need updates, if the last installed
 * field storage schema for the changed entity type contain the 'workspace'
 * field - a field provided by multiversion, then we know that this entity has
 * been already enabled as multiversionable and we add it as enabled in the new
 * configuration object.
 */
function multiversion_update_8005() {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $changed_entity_types = array_keys($update_manager->getChangeSummary());
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $enabled_entity_types = [];
  // Loop through all changes, if it's a change for an entity type and the last
  // installed field storage schema contains the 'workspace' field, add this
  // entity as enabled.
  foreach ($changed_entity_types as $entity_type_id) {
    if ($update_manager->getEntityType($entity_type_id)) {
      $last_field_storage_definition = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
      if (isset($last_field_storage_definition['workspace'])) {
        $enabled_entity_types[] = $entity_type_id;
      }
    }
  }
  // To the enabled entity types list, add testing and replication log entity
  // types.
  $enabled_entity_types = array_merge(
    $enabled_entity_types,
    [
      'entity_test',
      'entity_test_rev',
      'entity_test_mul',
      'entity_test_mulrev',
      'replication_log',
    ]
  );
  \Drupal::configFactory()
    ->getEditable('multiversion.settings')
    ->set('enabled_entity_types', $enabled_entity_types)
    ->save();
}
